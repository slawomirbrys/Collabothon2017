


<table width="100%">
    <tr>
        <td></td>
        <td>
            <h1 style="font-weight:500;">Speech Recognition</h1>
            <h2 style="font-weight:500; font-size: 60pt" id="phraseDiv"></h2>
        </td>
    </tr>
</table>
<script src="https://unpkg.com/botframework-directlinejs/directLine.js"></script>

<!-- The SDK has a dependency on requirejs (http://requirejs.org/). -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.3/require.min.js"></script>

<!-- SDK REFERENCE -->
<script src="~/scripts/speech.browser.sdk.js"></script>
<script src="~/scripts/BingTTSClient.js"></script>
<script src="~/scripts/BingSpeech.js"></script>

<!-- SDK USAGE -->
<script>
    // On doument load resolve the SDK dependecy
    function Initialize(onComplete) {
        require(["Speech.Browser.Sdk"], function (SDK) {
            onComplete(SDK);
        });
    }

    // Setup the recongizer
    function RecognizerSetup(SDK, subscriptionKey) {
        var recognizerConfig = new SDK.RecognizerConfig(
            new SDK.SpeechConfig(
                new SDK.Context(
                    new SDK.OS(navigator.userAgent, "Browser", null),
                    new SDK.Device("SpeechSample", "SpeechSample", "1.0.00000"))),
            SDK.RecognitionMode.Interactive, // SDK.RecognitionMode.Interactive  (Options - Interactive/Conversation/Dictation>)
            "en-US", // Supported laguages are specific to each recognition mode. Refer to docs.
            SDK.SpeechResultFormat.Simple); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)
        //SDK.SpeechResultFormat[formatOptions.value]

        // Alternatively use SDK.CognitiveTokenAuthentication(fetchCallback, fetchOnExpiryCallback) for token auth
        var authentication = new SDK.CognitiveSubscriptionKeyAuthentication(subscriptionKey);

        return SDK.CreateRecognizer(recognizerConfig, authentication);
    }

    // Start the recognition
    function RecognizerStart(SDK, recognizer) {
        recognizer.Recognize((event) => {
            /*
             Alternative syntax for typescript devs.
             if (event instanceof SDK.RecognitionTriggeredEvent)
            */
            switch (event.Name) {
                case "RecognitionTriggeredEvent":
                    UpdateStatus("Initializing");
                    break;
                case "ListeningStartedEvent":
                    UpdateStatus("Listening");
                    break;
                case "RecognitionStartedEvent":
                    UpdateStatus("Listening_Recognizing");
                    break;
                case "SpeechStartDetectedEvent":
                    UpdateStatus("Listening_DetectedSpeech_Recognizing");
                    //console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechHypothesisEvent":
                    UpdateRecognizedHypothesis(event.Result.Text);
                    //console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechEndDetectedEvent":
                    OnSpeechEndDetected();
                    UpdateStatus("Processing_Adding_Final_Touches");
                    //console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechSimplePhraseEvent":
                    UpdateRecognizedPhrase(event.Result.DisplayText);
                    console.log('Recognized text: ', event.Result.DisplayText);
                    //DoSpeak(event.Result.DisplayText);
                    TalkToBot(event.Result.DisplayText);
                    break;
                case "SpeechDetailedPhraseEvent":
                    UpdateRecognizedPhrase(JSON.stringify(event.Result, null, 3));
                    break;
                case "RecognitionEndedEvent":
                    //OnComplete();
                    //UpdateStatus("Idle");
                    //RecognizerStart(SDK, recognizer);
                    //console.log(JSON.stringify(event)); // Debug information
                    break;
            }
        })
            .On(() => {
                // The request succeeded. Nothing to do here.
            },
            (error) => {
                console.error(error);
            });
    }

    // Stop the Recognition.
    function RecognizerStop(SDK, recognizer) {
        // recognizer.AudioSource.Detach(audioNodeId) can be also used here. (audioNodeId is part of ListeningStartedEvent)
        recognizer.AudioSource.TurnOff();
    }

    function DoSpeak(text) {
        if (text) {
            bingClientTTS.synthesize(text, BingTTS.SupportedLocales.enAU_Female, () => {
                RecognizerStart(SDK, recognizer);
            });
        }
        else {
            RecognizerStart(SDK, recognizer);
        }
    }

   

</script>

<!-- Browser Hooks -->
<script>
    var startBtn, stopBtn, hypothesisDiv, phraseDiv, statusDiv, key, languageOptions, formatOptions;
    var SDK;
    var recognizer;
    var previousSubscriptionKey;
    var bingClientTTS;
    var botKey;
    var botDirectLine;
    var userId = "1";
    var userName = "web";

    document.addEventListener("DOMContentLoaded", function () {
        createBtn = document.getElementById("createBtn");
        //startBtn = document.getElementById("startBtn");
        //stopBtn = document.getElementById("stopBtn");
        phraseDiv = document.getElementById("phraseDiv");
        //hypothesisDiv = document.getElementById("hypothesisDiv");
        statusDiv = document.getElementById("statusDiv");
        console.log('key is', '@System.Configuration.ConfigurationManager.AppSettings["SpeechKey"]')
        key = '@System.Configuration.ConfigurationManager.AppSettings["SpeechKey"]'; //document.getElementById("key");
        botKey = '@System.Configuration.ConfigurationManager.AppSettings["BotKey"]';

        languageOptions = 'en-US'; //document.getElementById("languageOptions");
        formatOptions = 'Simple'; //document.getElementById("formatOptions");
        bingClientTTS = new BingTTS.Client(key);
        //bingClientTTS.synthesize("Hello my dear", BingTTS.SupportedLocales.enGB_Female, () => {
        //});

        //languageOptions.addEventListener("change", function () {
        //    Setup();
        //});

        Initialize(function (speechSdk) {
            SDK = speechSdk;
            botDirectLine = new DirectLine.DirectLine({
                secret: botKey,
                //token: /* or put your Direct Line token here (supply secret OR token, not both) */,
                //domain: /* optional: if you are not using the default Direct Line endpoint, e.g. if you are using a region-specific endpoint, put its full URL here */
                //webSocket: /* optional: false if you want to use polling GET to receive messages. Defaults to true (use WebSocket). */,
                //pollingInterval: /* optional: set polling interval in milliseconds. Default to 1000 */,
            });

            Setup();
            RecognizerStart(SDK, recognizer);
            //startBtn.disabled = false;
        });

        //startBtn.addEventListener("click", function () {
        //    if (!recognizer || previousSubscriptionKey != key.value) {
        //        previousSubscriptionKey = key.value;
        //        Setup();
        //    }

        //    hypothesisDiv.innerHTML = "";
        //    phraseDiv.innerHTML = "";
        //    RecognizerStart(SDK, recognizer);
        //    startBtn.disabled = true;
        //    stopBtn.disabled = false;
        //});

        //stopBtn.addEventListener("click", function () {
        //    RecognizerStop(SDK, recognizer);
        //    startBtn.disabled = false;
        //    stopBtn.disabled = true;
        //});


    });

    function Setup() {
        recognizer = RecognizerSetup(SDK, key);
    }

    function UpdateStatus(status) {
        //statusDiv.innerHTML = status;
    }

    function UpdateRecognizedHypothesis(text) {
        //hypothesisDiv.innerHTML = text;
    }

    function OnSpeechEndDetected() {
        //stopBtn.disabled = true;
    }

    function UpdateRecognizedPhrase(text) {
        if (text) {
            phraseDiv.innerHTML = text;
        }
        else {
            phraseDiv.innerHTML = '';
        }
    }

    function OnComplete() {
        //startBtn.disabled = false;
        //stopBtn.disabled = true;
    }

    function TalkToBot(text) {
        if (text) {
            botDirectLine.postActivity({
                from: { id: userId, name: userName }, // required (from.name is optional)
                type: 'message',
                text: text
            }).subscribe(
                id => {
                    console.log("Posted activity, assigned ID ", id);

                    botDirectLine.activity$
                        .filter(activity => activity.type === 'message' && activity.from.id !== userId)
                        .subscribe(
                        message => {
                            console.log("received message ", message.text);
                            DoSpeak(message.text);
                        });
                },
                error => console.log("Error posting activity", error));
        }
        else {
            RecognizerStart(SDK, recognizer);
        }
    }
</script>
