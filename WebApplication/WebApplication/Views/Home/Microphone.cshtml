
@{ 
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.slim.min.js"></script>

<table style="width: 600px">
    <tr>
        <td>
            <h1 style="font-weight:500;">Account Manager</h1>
        </td>
        <td style="font-size: 40pt; display: flex">
            <i class="fa fa-assistive-listening-systems" 
               id="icon1"
               aria-hidden="true" 
               style="color: limegreen; display: none"></i>
            <i class="fa fa-cogs" 
               id="icon2"
               aria-hidden="true" 
               style="color: gray; display: none"></i>
            <i class="fa fa-commenting" 
               id="icon3"
               aria-hidden="true" 
               style="color: orangered; display: none"></i>
            <i class="fa fa-bomb"
               id="icon4"
               aria-hidden="true"
               style="color: red; display: none"></i>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <h2 style="font-weight:500; font-size: 30pt; background-color: #eeeeee" id="phraseDiv">&nbsp;</h2>
        </td>
    </tr>
    <tr>
        <td colspan="2" id="history">
        </td>
    </tr>
</table>
<script src="https://unpkg.com/botframework-directlinejs/directLine.js"></script>

<!-- The SDK has a dependency on requirejs (http://requirejs.org/). -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.3/require.min.js"></script>

<!-- SDK REFERENCE -->
<script src="~/scripts/speech.browser.sdk.js"></script>
<script src="~/scripts/BingTTSClient.js"></script>
<script src="~/scripts/BingSpeech.js"></script>

<!-- SDK USAGE -->
<script>
    // On doument load resolve the SDK dependecy
    function Initialize(onComplete) {
        require(["Speech.Browser.Sdk"], function (SDK) {
            onComplete(SDK);
        });
    }

    // Setup the recongizer
    function RecognizerSetup(SDK, subscriptionKey) {
        var recognizerConfig = new SDK.RecognizerConfig(
            new SDK.SpeechConfig(
                new SDK.Context(
                    new SDK.OS(navigator.userAgent, "Browser", null),
                    new SDK.Device("SpeechSample", "SpeechSample", "1.0.00000"))),
            SDK.RecognitionMode.Interactive, // SDK.RecognitionMode.Interactive  (Options - Interactive/Conversation/Dictation>)
            "en-US", // Supported laguages are specific to each recognition mode. Refer to docs.
            SDK.SpeechResultFormat.Simple); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)
        //SDK.SpeechResultFormat[formatOptions.value]

        // Alternatively use SDK.CognitiveTokenAuthentication(fetchCallback, fetchOnExpiryCallback) for token auth
        var authentication = new SDK.CognitiveSubscriptionKeyAuthentication(subscriptionKey);

        return SDK.CreateRecognizer(recognizerConfig, authentication);
    }

    var recognizing = false;
    // Start the recognition
    function RecognizerStart(SDK, recognizer) {
        if (recognizing) {
            console.log('>>> OMMITTED DOUBLED RECOGNIZER');
            return;
        }
        console.log('--> START RECOGNITION');
        console.log('recognizer', recognizer);
        recognizer.Recognize((event) => {
            /*
             Alternative syntax for typescript devs.
             if (event instanceof SDK.RecognitionTriggeredEvent)
            */
            switch (event.Name) {
                case "RecognitionTriggeredEvent":
                    UpdateStatus("Initializing");
                    break;
                case "ListeningStartedEvent":
                    UpdateStatus("Listening");
                    break;
                case "RecognitionStartedEvent":
                    UpdateStatus("Listening_Recognizing");
                    showIcon(1);
                    break;
                case "SpeechStartDetectedEvent":
                    UpdateStatus("Listening_DetectedSpeech_Recognizing");
                    showIcon(1);
                    //console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechHypothesisEvent":
                    UpdateRecognizedHypothesis(event.Result.Text);
                    //console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechEndDetectedEvent":
                    OnSpeechEndDetected();
                    UpdateStatus("Processing_Adding_Final_Touches");
                    //console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechSimplePhraseEvent":
                    UpdateRecognizedPhrase(event.Result.DisplayText);
                    //console.log('Recognized text: ', event.Result.DisplayText);
                    //DoSpeak(event.Result.DisplayText);
                    TalkToBot(event.Result.DisplayText);
                    break;
                case "SpeechDetailedPhraseEvent":
                    UpdateRecognizedPhrase(JSON.stringify(event.Result, null, 3));
                    break;
                case "RecognitionEndedEvent":
                    //OnComplete();
                    //UpdateStatus("Idle");
                    //RecognizerStart(SDK, recognizer);
                    //console.log(JSON.stringify(event)); // Debug information
                    break;
            }
        })
            .On(() => {
                // The request succeeded. Nothing to do here.
            },
            (error) => {
                console.error('Error on speach', error);
                showError();
            });
    }

    // Stop the Recognition.
    function RecognizerStop(SDK, recognizer) {
        // recognizer.AudioSource.Detach(audioNodeId) can be also used here. (audioNodeId is part of ListeningStartedEvent)
        recognizer.AudioSource.TurnOff();
    }

    
</script>

<!-- Browser Hooks -->
<script>
    var startBtn, stopBtn, hypothesisDiv, phraseDiv, statusDiv, key, languageOptions, formatOptions;
    var SDK;
    var recognizer;
    var previousSubscriptionKey;
    var bingClientTTS;
    var botKey;
    var botDirectLine;
    var userId = "1";
    var userName = "web";
    var icon1 = $('#icon1');
    var icon2 = $('#icon2');
    var icon3 = $('#icon3');
    var speaking = false;
    var lastMessageId = '';

    window.onerror = function (msg, url, line) {
        console.error(msg);
        showError();
        return true; // same as preventDefault
    };

    document.addEventListener("DOMContentLoaded", function () {
        createBtn = document.getElementById("createBtn");
        //startBtn = document.getElementById("startBtn");
        //stopBtn = document.getElementById("stopBtn");
        phraseDiv = document.getElementById("phraseDiv");
        //hypothesisDiv = document.getElementById("hypothesisDiv");
        statusDiv = document.getElementById("statusDiv");
        key = '@System.Configuration.ConfigurationManager.AppSettings["SpeechKey"]';
        botKey = '@System.Configuration.ConfigurationManager.AppSettings["BotKey"]';
        console.log('speechKey: ', key);
        console.log('botKey:', botKey);

        languageOptions = 'en-US'; //document.getElementById("languageOptions");
        formatOptions = 'Simple'; //document.getElementById("formatOptions");
        bingClientTTS = new BingTTS.Client(key);
        //bingClientTTS.synthesize("Hello my dear", BingTTS.SupportedLocales.enGB_Female, () => {
        //});

        //languageOptions.addEventListener("change", function () {
        //    Setup();
        //});

        Initialize(function (speechSdk) {
            SDK = speechSdk;
            botDirectLine = new DirectLine.DirectLine({
                secret: botKey,
                //token: /* or put your Direct Line token here (supply secret OR token, not both) */,
                //domain: /* optional: if you are not using the default Direct Line endpoint, e.g. if you are using a region-specific endpoint, put its full URL here */
                //webSocket: false /* optional: false if you want to use polling GET to receive messages. Defaults to true (use WebSocket). */,
                //pollingInterval: 250 /* optional: set polling interval in milliseconds. Default to 1000 */,
            });

            Setup();
            RecognizerStart(SDK, recognizer);
            //startBtn.disabled = false;
        });

        //startBtn.addEventListener("click", function () {
        //    if (!recognizer || previousSubscriptionKey != key.value) {
        //        previousSubscriptionKey = key.value;
        //        Setup();
        //    }

        //    hypothesisDiv.innerHTML = "";
        //    phraseDiv.innerHTML = "";
        //    RecognizerStart(SDK, recognizer);
        //    startBtn.disabled = true;
        //    stopBtn.disabled = false;
        //});

        //stopBtn.addEventListener("click", function () {
        //    RecognizerStop(SDK, recognizer);
        //    startBtn.disabled = false;
        //    stopBtn.disabled = true;
        //});


    });

    function Setup() {
        recognizer = RecognizerSetup(SDK, key);
    }

    function UpdateStatus(status) {
        //statusDiv.innerHTML = status;
        console.log('Update status:', status);
    }

    function UpdateRecognizedHypothesis(text) {
        //hypothesisDiv.innerHTML = text;
    }

    function OnSpeechEndDetected() {
        //stopBtn.disabled = true;
    }

    function UpdateRecognizedPhrase(text) {
        if (text) {
            phraseDiv.innerHTML = text;
        }
        else {
            phraseDiv.innerHTML = '&nbsp';
        }
    }

    function OnComplete() {
        //startBtn.disabled = false;
        //stopBtn.disabled = true;
    }

    var lastText;
    function TalkToBot(text) {
        recognizing = false;
        lastText = text;
        console.log(`:::talk: "${text}"`);
        if (text) {
            showIcon(2);
            botDirectLine.postActivity({
                from: { id: userId, name: userName }, // required (from.name is optional)
                type: 'message',
                text: text
            }).subscribe(
                id => {
                    console.log("Posted activity, assigned ID ", id);
                    if (id === 'retry') {
                        console.log('handling "please repeat"');
                        if (!speaking) {
                            MoveToHistory(lastText, false);
                            DoSpeak('Please repeat');
                            //MoveToHistory('Please repeat', true);
                        }
                    }
                    else {
                        botDirectLine.activity$
                            .filter(activity => activity.type === 'message' && activity.from.id !== userId && !speaking)
                            .subscribe(
                            message => {
                                if (!speaking && message.id !== lastMessageId) {
                                    lastMessageId = message.id;
                                    MoveToHistory(lastText, false);
                                    console.log("received message ", message.text);
                                    console.log(message);
                                    DoSpeak(message.text);
                                }
                                else {
                                    console.log('!!! OMMITED DOUBLED MESSAGE');
                                }
                            },
                            erorr => {
                                console.log('Error when receiving message from bot', error);
                                showError();
                            });
                    }
                },
                error => {
                    console.log("Error posting activity", error)
                    showError();
                });
        }
        else {
            showIcon(1);
            RecognizerStart(SDK, recognizer);
        }
    }

    function MoveToHistory(text, isBot) {
        var h = '<h3 style="color: ';
        if (isBot) {
            h += 'coral; text-align: right';
        }
        else {
            h += 'cornflowerblue';
        }
        h += ';">';
        h += text;
        h += "</h3>";
        $('#history').prepend(h);
        UpdateRecognizedPhrase();
    }

    function DoSpeak(text) {
        console.log(`:::speak: "${text}"`);
        UpdateRecognizedPhrase();
        if (text) {
            showIcon(3);
            phraseDiv.innerHTML = text;
            bingClientTTS.synthesize(text, BingTTS.SupportedLocales.enAU_Female, () => {
                RecognizerStart(SDK, recognizer);
                MoveToHistory(text, true);
                speaking = false;
            });
        }
        else {
            showIcon(1);
            RecognizerStart(SDK, recognizer);
        }
    }

    function showIcon(number) {
        console.log('showIcon', number);
        $('#icon1').hide();
        $('#icon2').hide();
        $('#icon3').hide();
        //$('#icon4').hide();
        $(`#icon${number}`).show();
    }

    function showError() {
        showIcon(4);
    }

</script>
